import {
    Container,
    Typography,
    OutlinedInput,
    Stack,
    Checkbox,
    InputAdornment,
    FormControl,
    FormGroup,
    FormControlLabel,
    Button,
    Card,
    CardHeader,
    CardContent,
    Alert,
    Accordion,
    AccordionSummary,
    AccordionDetails,
    List,
    ListItem,
    ListItemText,
} from '@mui/material';
import Iconify from '../../components/Iconify';
import { FormEventHandler, useState } from 'react';

// ----------------------------------------------------------------------
function numberWithCommas(x: string) {
    x = x.toString();
    const pattern = /(-?\d+)(\d{3})/;
    while (pattern.test(x))
        x = x.replace(pattern, "$1,$2");
    return x;
}

export default function Tool() {
    const [price, setPrice] = useState(0);
    const [isMercari, setIsMercari] = useState(false);
    const [result, setResult] = useState(0);
    const [text, setText] = useState("");
    const [count, setCount] = useState(0);

    console.log(result);

    const handleCheckPrice: FormEventHandler = (event) => {
        event.preventDefault();
        setCount(count => count + 1);
        const rate = isMercari ? 175 : 173;
        let profit;
        if (count > 10 + price % 10) {
            setCount(0);
            setResult(0);
            setText("Gi√°n ƒëi·ªáp shop n√†o hay sao m√† check gi√° nhi·ªÅu th·∫ø ·∫° :'(");
            return;
        }
        if (price < 100) { setResult(-10); return; }
        else if (price < 1081) profit = 30 + price % 10; // < 200k
        else if (price < 1621) profit = 40 + price % 10; // < 300k
        else if (price < 2702) profit = 40 + price % 10; // < 400k
        else if (price < 3783) profit = 50 + price % 10; // < 500k
        else if (price < 5405) profit = 60 + price % 10; // < 700k
        else if (price < 8108) profit = 80 + price % 10; // < 1000k
        else if (price < 21621) profit = 200 + price % 10;  // < 4000k
        else profit = 400;
        setResult(Math.round((rate * price * 1.06) / 1000 + profit) * 1000);
    }

    return (
        <Stack sx={{ my: 2 }} spacing={2}>
            <Typography variant="h3" component="h1" paragraph>
                Imouto Store - Tool t√≠nh gi√° nhanh
            </Typography>
            <Typography marginBottom={2}>
                Tool s·∫Ω gi√∫p b·∫°n t√≠nh gi√° nhanh m√† kh·ªèi c·∫ßn ch·ªù ch·ªß shop rep ü§£
            </Typography>
            <form onSubmit={handleCheckPrice}>
                <FormControl variant="outlined">
                    <OutlinedInput
                        value={price}
                        onChange={(event) => setPrice(Number(event.target.value))}
                        startAdornment={<InputAdornment position="start">¬•</InputAdornment>}
                        aria-describedby="outlined-weight-helper-text"
                        placeholder="Nh·∫≠p gi√° y√™n c·ªßa m·∫∑t h√†ng t·∫°i ƒë√¢y"
                        inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}
                        onFocus={event => {
                            event.target.select();
                        }}
                    />
                </FormControl>
                <FormGroup>
                    <FormControlLabel control={<Checkbox value={isMercari} onChange={(event) => setIsMercari(event.target.checked)} />} label="T√≠ch √¥ n√†y n·∫øu m·∫∑t h√†ng tr√™n website Mercari" />
                </FormGroup>
                <Button variant='contained' type='submit'>Xem gi√°</Button>
            </form>
            {
                result > 0 &&
                <Stack spacing={1}>
                    <Card>
                        <CardContent>
                            <Typography align='center'>Gi√° ti·ªÅn mua t·∫°i Imouto Store s·∫Ω l√†</Typography>
                            <Typography variant='h2' align='center'>
                                {numberWithCommas(String(result))}ƒê
                            </Typography>
                            <Typography variant='subtitle2' align='center'>*Ch∆∞a t√≠nh ti·ªÅn c√¢n</Typography>
                        </CardContent>
                    </Card>
                    <div>
                        <Accordion>
                            <AccordionSummary
                                expandIcon={<Iconify icon='eva:arrow-ios-downward-fill' />}
                                aria-controls="panel1a-content"
                                id="panel1a-header"
                            >
                                <Typography>Ti·ªÅn c√¢n l√† g√¨?</Typography>
                            </AccordionSummary>
                            <AccordionDetails>
                                <Typography>
                                    {`Ti·ªÅn c√¢n l√† ti·ªÅn v·∫≠n chuy·ªÉn qu·ªëc t·∫ø b·∫±ng ƒë∆∞·ªùng m√°y bay (1-2 tu·∫ßn l√† v·ªÅ t·ªõi Vi·ªát Nam). 
                                    Khi ƒë·∫∑t c·ªçc b·∫°n ch·ªâ c·∫ßn c·ªçc s·ªë ti·ªÅn tr√™n, c√≤n ti·ªÅn c√¢n Imouto Store s·∫Ω th√¥ng b√°o 
                        b·∫°n sau khi c√¢n h√†ng ch√≠nh x√°c, kh√¥ng l·∫•y d∆∞. Gi√° c√¢n t·∫°i shop l√† `}
                                </Typography>
                                <Typography variant='h4' align='center'>
                                    200k/kg
                                </Typography>
                                <Typography>√Ång ch·ª´ng m·ªôt s·ªë lo·∫°i m·∫∑t h√†ng</Typography>
                                <List>
                                    <ListItem>
                                        <ListItemText primary="Manga" secondary="30k" />
                                    </ListItem>
                                    <ListItem>
                                        <ListItemText primary="Light Novel" secondary="40k" />
                                    </ListItem>
                                    <ListItem>
                                        <ListItemText primary="Artbook > 50 trang" secondary="80k" />
                                    </ListItem>
                                </List>
                            </AccordionDetails>
                        </Accordion>
                    </div>
                </Stack>
            }
            {
                result < 0 &&
                <Alert severity='error'>ƒê·ª´ng ƒë√πa shop th·∫ø üòÖ</Alert>
            }
            {
                !result && text &&
                <Alert severity='warning'>{text}</Alert>
            }

        </Stack>
    );
}
